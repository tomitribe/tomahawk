/*
 * Tomitribe Confidential
 *
 * Copyright Tomitribe Corporation. 2016
 *
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been
 * deposited with the U.S. Copyright Office.
 *
 */
package com.tomitribe.tomahawk;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Date;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.SSLSocket;

public final class TomahawkPrinter {
    private TomahawkPrinter() {
    }

    private static final LinkedBlockingQueue<String> logBuffer = new LinkedBlockingQueue<>(250);

    static {
        try {
            Runnable target = new Runnable() {
                @Override
                public void run() {
                    String logFileName = System.getProperty("TomahawkAgent.logfile", null);
                    if (logFileName == null) {
                        logFileName = System.getProperty("user.home") + "/ssl.log";
                        System.out.println(String
                                .format("%s TomahawkAgent: '-DTomahawkAgent.logfile=...' property not defined, using '%s' instead",
                                        new Date().toString(), logFileName));
                    } else {
                        System.out.println(String.format("%s TomahawkAgent: using logfile:'%s'", new Date().toString(), logFileName));
                    }
                    try (FileWriter fileWriter = new FileWriter(logFileName, true);
                            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                            PrintWriter writer = new PrintWriter(bufferedWriter)) {
                        writer.println(String.format("# Generated by TomahawkAgent %s", new Date().toString()));
                        while (!Thread.currentThread().isInterrupted()) {
                            final String logLine = logBuffer.poll(1000, TimeUnit.MILLISECONDS);
                            if (logLine != null) {
                                writer.println(logLine);
                                writer.flush();
                            }
                        }
                    } catch (Throwable e) {
                        e.printStackTrace();
                        throw new RuntimeException(e);
                    }
                }
            };
            Thread thread = new Thread(target);
            thread.start();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public static void queueLogLine(String label, byte[] encrypted, byte[] preMaster, SSLSocket sslSocket) {
        StringBuilder sb = new StringBuilder();
        sb.append("# ");
        sb.append(new Date().toString());
        if (sslSocket != null) {
            sb.append(" ");
            sb.append(sslSocket.getLocalSocketAddress());
            sb.append(" -> ");
            sb.append(sslSocket.getRemoteSocketAddress());
        }
        sb.append("\r\n");
        sb.append(String.format("%s %s %s", label, toHexString(encrypted), toHexString(preMaster)));
        logBuffer.add(sb.toString());
    }

    private static String toHexString(byte[] encoded) {
        StringBuilder hexString = new StringBuilder();
        for (int position = 0; position < encoded.length; position++) {
            int currentByte = encoded[position] & 0xFF;
            hexString.append(currentByte < 0x10 ? "0" : "");
            hexString.append(Integer.toHexString(currentByte));
        }
        return hexString.toString();
    }
}
